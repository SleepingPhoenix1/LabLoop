[gd_scene load_steps=44 format=2]

[ext_resource path="res://scripts/entity/player1.gd" type="Script" id=2]
[ext_resource path="res://sprites/Player_a_shoot.png" type="Texture" id=3]
[ext_resource path="res://sprites/health_bar_logo.png" type="Texture" id=4]
[ext_resource path="res://other/color_swap.tres" type="Material" id=5]
[ext_resource path="res://sprites/block.png" type="Texture" id=6]
[ext_resource path="res://other/kongtext.ttf" type="DynamicFontData" id=7]
[ext_resource path="res://sprites/player_2.png" type="Texture" id=8]

[sub_resource type="RectangleShape2D" id=1]
extents = Vector2( 3.70932, 3.95521 )

[sub_resource type="Animation" id=2]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("PlayerAShoot:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 1 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Player:frame")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0 ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("Player:flip_h")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ true ]
}

[sub_resource type="Animation" id=15]
resource_name = "down_sh"
length = 0.4
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("PlayerAShoot:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 1,
"values": [ 1, 0, 2, 0 ]
}

[sub_resource type="Animation" id=14]
resource_name = "fall"
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("Player:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ 11, 12 ]
}

[sub_resource type="Animation" id=3]
resource_name = "idle"
length = 1.5
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("Player:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1.1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ 0, 1 ]
}

[sub_resource type="Animation" id=17]
resource_name = "idle_down_sh"
length = 0.1
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("PlayerAShoot:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ 0 ]
}

[sub_resource type="Animation" id=18]
resource_name = "idle_left_sh"
length = 1.5
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("Player:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ 0, 1 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Player:flip_h")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 1.1 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ true ]
}

[sub_resource type="Animation" id=19]
resource_name = "idle_right_sh"
length = 1.5
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("Player:flip_h")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ false ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Player:frame")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 1.3 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ 0, 1 ]
}

[sub_resource type="Animation" id=20]
resource_name = "idle_up_sh"
length = 0.1
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("PlayerAShoot:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ 3 ]
}

[sub_resource type="Animation" id=7]
resource_name = "jump"
length = 0.1
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("Player:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ 10 ]
}

[sub_resource type="Animation" id=21]
resource_name = "left_sh"
length = 0.4
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("PlayerAShoot:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 1,
"values": [ 9, 11, 10, 11 ]
}

[sub_resource type="Animation" id=13]
resource_name = "on_wall"
length = 0.1
loop = true

[sub_resource type="Animation" id=22]
resource_name = "right_sh"
length = 0.4
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("PlayerAShoot:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 1,
"values": [ 8, 6, 7, 6 ]
}

[sub_resource type="Animation" id=16]
resource_name = "up_sh"
length = 0.4
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("PlayerAShoot:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 1,
"values": [ 4, 3, 5, 3 ]
}

[sub_resource type="Animation" id=4]
resource_name = "walk"
length = 0.4
loop = true
step = 0.01
tracks/0/type = "value"
tracks/0/path = NodePath("Player:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 2, 3, 4, 5, 6, 7, 8, 9 ]
}

[sub_resource type="Animation" id=9]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("Player:scale")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( 1, 1 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Player:position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( 0, -3 ) ]
}

[sub_resource type="Animation" id=10]
resource_name = "fall"
length = 100.0

[sub_resource type="Animation" id=11]
resource_name = "jump"
length = 10.0
loop = true
step = 0.01
tracks/0/type = "value"
tracks/0/path = NodePath("Player:scale")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector2( 1, 1 ), Vector2( 1, 0.65625 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Player:position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector2( 0, -3 ), Vector2( 0, -1 ) ]
}

[sub_resource type="Animation" id=12]
resource_name = "land"

[sub_resource type="Gradient" id=38]
colors = PoolColorArray( 0, 0, 0, 1, 0.722656, 0.722656, 0.722656, 0 )

[sub_resource type="GradientTexture" id=39]
gradient = SubResource( 38 )

[sub_resource type="ParticlesMaterial" id=37]
emission_shape = 1
emission_sphere_radius = 1.0
flag_disable_z = true
spread = 20.29
gravity = Vector3( 0, 0, 0 )
orbit_velocity = 0.0
orbit_velocity_random = 0.0
scale = 0.09
scale_random = 0.2
color_ramp = SubResource( 39 )

[sub_resource type="Animation" id=43]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("../fade_out:color")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 0, 0, 0, 0 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("../fade_out:self_modulate")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 0, 0, 0, 1 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("../fade_out:modulate")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0 ) ]
}

[sub_resource type="Animation" id=45]
resource_name = "fade_in"
length = 0.2
tracks/0/type = "value"
tracks/0/path = NodePath("../fade_out:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ) ]
}

[sub_resource type="Animation" id=44]
resource_name = "fade_out"
length = 0.3
tracks/0/type = "value"
tracks/0/path = NodePath("../fade_out:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.3 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ) ]
}

[sub_resource type="DynamicFont" id=46]
font_data = ExtResource( 7 )

[sub_resource type="StyleBoxFlat" id=41]
bg_color = Color( 1, 0.980392, 0.301961, 1 )
border_width_left = 3
border_width_top = 3
border_width_right = 3
border_width_bottom = 3
border_color = Color( 1, 1, 1, 0 )

[sub_resource type="StyleBoxFlat" id=42]
bg_color = Color( 1, 1, 1, 0 )
border_width_left = 2
border_width_top = 2
border_width_right = 2
border_width_bottom = 2
border_color = Color( 1, 0.980392, 0.301961, 1 )

[sub_resource type="Theme" id=47]

[sub_resource type="StyleBoxFlat" id=48]
bg_color = Color( 0.2, 0.235294, 0.513726, 1 )
border_width_left = 3
border_width_top = 3
border_width_right = 3
border_width_bottom = 3
border_color = Color( 1, 1, 1, 0 )

[sub_resource type="StyleBoxFlat" id=49]
bg_color = Color( 1, 1, 1, 0 )
border_width_left = 2
border_width_top = 2
border_width_right = 2
border_width_bottom = 2
border_color = Color( 0.2, 0.235294, 0.513726, 1 )

[sub_resource type="Theme" id=50]

[sub_resource type="StyleBoxFlat" id=51]
bg_color = Color( 0.2, 0.235294, 0.513726, 1 )
border_width_left = 3
border_width_top = 3
border_width_right = 3
border_width_bottom = 3
border_color = Color( 1, 1, 1, 0 )

[sub_resource type="StyleBoxFlat" id=52]
bg_color = Color( 1, 1, 1, 0 )
border_width_left = 2
border_width_top = 2
border_width_right = 2
border_width_bottom = 2
border_color = Color( 0.2, 0.235294, 0.513726, 1 )

[sub_resource type="Shader" id=53]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/VHS-and-CRT-monitor-effect

This shader is under CC0 license. Feel free to use, improve and 
change this shader according to your needs and consider sharing 
the modified result to godotshaders.com.
*/

shader_type canvas_item;

//*** IMPORTANT! ***/ 
// - If you are using this shader to affect the node it is applied to set 'overlay' to false (unchecked in the instepctor).
// - If you are using this shader as an overlay, and want the shader to affect the nodes below in the Scene hierarchy,
//   set 'overlay' to true (checked in the inspector).
// On Mac there is potentially a bug causing this to not work properly. If that is the case and you want to use the shader as an overlay
// change all \"overlay ? SCREEN_TEXTURE : TEXTURE\" to only \"SCREEN_TEXTURE\" on lines 129-140, and \"vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV);\"
// to \"vec2 uv = warp(SCREEN_UV);\" on line 98.
uniform bool overlay = false;

uniform float scanlines_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float scanlines_width : hint_range(0.0, 0.5) = 0.25;
uniform float grille_opacity : hint_range(0.0, 1.0) = 0.3;
uniform vec2 resolution = vec2(640.0, 480.0); // Set the number of rows and columns the texture will be divided in. Scanlines and grille will make a square based on these values

uniform bool pixelate = true; // Fill each square (\"pixel\") with a sampled color, creating a pixel look and a more accurate representation of how a CRT monitor would work.

uniform bool roll = true;
uniform float roll_speed = 8.0; // Positive values are down, negative are up
uniform float roll_size : hint_range(0.0, 100.0) = 15.0;
uniform float roll_variation : hint_range(0.1, 5.0) = 1.8; // This valie is not an exact science. You have to play around with the value to find a look you like. How this works is explained in the code below.
uniform float distort_intensity : hint_range(0.0, 0.2) = 0.05; // The distortion created by the rolling effect.

uniform float noise_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float noise_speed = 5.0; // There is a movement in the noise pattern that can be hard to see first. This sets the speed of that movement.

uniform float static_noise_intensity : hint_range(0.0, 1.0) = 0.06;

uniform float aberration : hint_range(-1.0, 1.0) = 0.03; // Chromatic aberration, a distortion on each color channel.
uniform float brightness = 1.4; // When adding scanline gaps and grille the image can get very dark. Brightness tries to compensate for that.
uniform bool discolor = true; // Add a discolor effect simulating a VHS

uniform float warp_amount :hint_range(0.0, 5.0) = 1.0; // Warp the texture edges simulating the curved glass of a CRT monitor or old TV.
uniform bool clip_warp = false;

uniform float vignette_intensity = 0.4; // Size of the vignette, how far towards the middle it should go.
uniform float vignette_opacity : hint_range(0.0, 1.0) = 0.5;

// Used by the noise functin to generate a pseudo random value between 0.0 and 1.0
vec2 random(vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

// Generate a Perlin noise used by the distortion effects
float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix( mix( dot( random(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),
                     dot( random(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),
                mix( dot( random(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),
                     dot( random(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) * 0.5 + 0.5;
}

// Takes in the UV and warps the edges, creating the spherized effect
vec2 warp(vec2 uv){
	vec2 delta = uv - 0.5;
	float delta2 = dot(delta.xy, delta.xy);
	float delta4 = delta2 * delta2;
	float delta_offset = delta4 * warp_amount;
	
	return uv + delta * delta_offset;
}

// Adds a black border to hide stretched pixel created by the warp effect
float border (vec2 uv){
	float radius = min(warp_amount, 0.08);
	radius = max(min(min(abs(radius * 2.0), abs(1.0)), abs(1.0)), 1e-5);
	vec2 abs_uv = abs(uv * 2.0 - 1.0) - vec2(1.0, 1.0) + radius;
	float dist = length(max(vec2(0.0), abs_uv)) / radius;
	float square = smoothstep(0.96, 1.0, dist);
	return clamp(1.0 - square, 0.0, 1.0);
}

// Adds a vignette shadow to the edges of the image
float vignette(vec2 uv){
	uv *= 1.0 - uv.xy;
	float vignette = uv.x * uv.y * 15.0;
	return pow(vignette, vignette_intensity * vignette_opacity);
}

void fragment()
{
	vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV); // Warp the uv. uv will be used in most cases instead of UV to keep the warping
	vec2 text_uv = uv;
	vec2 roll_uv = vec2(0.0);
	float time = roll ? TIME : 0.0;
	

	// Pixelate the texture based on the given resolution.
	if (pixelate)
	{
		text_uv = ceil(uv * resolution) / resolution;
	}
	
	// Create the rolling effect. We need roll_line a bit later to make the noise effect.
	// That is why this runs if roll is true OR noise_opacity is over 0.
	float roll_line = 0.0;
	if (roll || noise_opacity > 0.0)
	{
		// Create the areas/lines where the texture will be distorted.
		roll_line = smoothstep(0.3, 0.9, sin(uv.y * roll_size - (time * roll_speed) ) );
		// Create more lines of a different size and apply to the first set of lines. This creates a bit of variation.
		roll_line *= roll_line * smoothstep(0.3, 0.9, sin(uv.y * roll_size * roll_variation - (time * roll_speed * roll_variation) ) );
		// Distort the UV where where the lines are
		roll_uv = vec2(( roll_line * distort_intensity * (1.-UV.x)), 0.0);
	}
	
	vec4 text;
	if (roll)
	{
		// If roll is true distort the texture with roll_uv. The texture is split up into RGB to 
		// make some chromatic aberration. We apply the aberration to the red and green channels accorging to the aberration parameter
		// and intensify it a bit in the roll distortion.
		text.r = texture(SCREEN_TEXTURE, text_uv + roll_uv * 0.8 + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv + roll_uv * 1.2 - vec2(aberration, 0.0) * .1 ).g;
		text.b = texture(SCREEN_TEXTURE, text_uv + roll_uv).b;
		text.a = 1.0;
	}
	else
	{
		// If roll is false only apply the aberration without any distorion. The aberration values are very small so the .1 is only 
		// to make the slider in the Inspector less sensitive.
		text.r = texture(SCREEN_TEXTURE, text_uv + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv - vec2(aberration, 0.0) * .1).g;
		text.b = texture(SCREEN_TEXTURE, text_uv).b;
		text.a = 1.0;
	}
	
	float r = text.r;
	float g = text.g;
	float b = text.b;
	
	uv = warp(UV);
	
	// CRT monitors don't have pixels but groups of red, green and blue dots or lines, called grille. We isolate the texture's color channels 
	// and divide it up in 3 offsetted lines to show the red, green and blue colors next to each other, with a small black gap between.
	if (grille_opacity > 0.0){
		
		float g_r = smoothstep(0.85, 0.95, abs(sin(uv.x * (resolution.x * 3.14159265))));
		r = mix(r, r * g_r, grille_opacity);
		
		float g_g = smoothstep(0.85, 0.95, abs(sin(1.05 + uv.x * (resolution.x * 3.14159265))));
		g = mix(g, g * g_g, grille_opacity);
		
		float b_b = smoothstep(0.85, 0.95, abs(sin(2.1 + uv.x * (resolution.x * 3.14159265))));
		b = mix(b, b * b_b, grille_opacity);
		
	}
	
	// Apply the grille to the texture's color channels and apply Brightness. Since the grille and the scanlines (below) make the image very dark you
	// can compensate by increasing the brightness.
	text.r = clamp(r * brightness, 0.0, 1.0);
	text.g = clamp(g * brightness, 0.0, 1.0);
	text.b = clamp(b * brightness, 0.0, 1.0);
	
	// Scanlines are the horizontal lines that make up the image on a CRT monitor. 
	// Here we are actual setting the black gap between each line, which I guess is not the right definition of the word, but you get the idea  
	float scanlines = 0.5;
	if (scanlines_opacity > 0.0)
	{
		// Same technique as above, create lines with sine and applying it to the texture. Smoothstep to allow setting the line size.
		scanlines = smoothstep(scanlines_width, scanlines_width + 0.5, abs(sin(uv.y * (resolution.y * 3.14159265))));
		text.rgb = mix(text.rgb, text.rgb * vec3(scanlines), scanlines_opacity);
	}
	
	// Apply the banded noise.
	if (noise_opacity > 0.0)
	{
		// Generate a noise pattern that is very stretched horizontally, and animate it with noise_speed
		float noise = smoothstep(0.4, 0.5, noise(uv * vec2(2.0, 200.0) + vec2(10.0, (TIME * (noise_speed))) ) );
		
		// We use roll_line (set above) to define how big the noise should be vertically (multiplying cuts off all black parts).
		// We also add in some basic noise with random() to break up the noise pattern above. The noise is sized according to 
		// the resolution value set in the inspector. If you don't like this look you can 
		// change \"ceil(uv * resolution) / resolution\" to only \"uv\" to make it less pixelated. Or multiply resolution with som value
		// greater than 1.0 to make them smaller.
		roll_line *= noise * scanlines * clamp(random((ceil(uv * resolution) / resolution) + vec2(TIME * 0.8, 0.0)).x + 0.8, 0.0, 1.0);
		// Add it to the texture based on noise_opacity
		text.rgb = clamp(mix(text.rgb, text.rgb + roll_line, noise_opacity), vec3(0.0), vec3(1.0));
	}
	
	// Apply static noise by generating it over the whole screen in the same way as above
	if (static_noise_intensity > 0.0)
	{
		text.rgb += clamp(random((ceil(uv * resolution) / resolution) + fract(TIME)).x, 0.0, 1.0) * static_noise_intensity;
	}
	
	// Apply a black border to hide imperfections caused by the warping.
	// Also apply the vignette
	text.rgb *= border(uv);
	text.rgb *= vignette(uv);
	// Hides the black border and make that area transparent. Good if you want to add the the texture on top an image of a TV or monitor.
	if (clip_warp)
	{
		text.a = border(uv);
	}
	
	// Apply discoloration to get a VHS look (lower saturation and higher contrast)
	// You can play with the values below or expose them in the Inspector.
	float saturation = 0.5;
	float contrast = 1.2;
	if (discolor)
	{
		// Saturation
		vec3 greyscale = vec3(text.r + text.g + text.b) / 3.;
		text.rgb = mix(text.rgb, greyscale, saturation);
		
		// Contrast
		float midpoint = pow(0.5, 2.2);
		text.rgb = (text.rgb - vec3(midpoint)) * contrast + midpoint;
	}
	
	COLOR = text;
}"

[sub_resource type="ShaderMaterial" id=54]
shader = SubResource( 53 )
shader_param/overlay = true
shader_param/scanlines_opacity = 0.0
shader_param/scanlines_width = 0.0
shader_param/grille_opacity = 0.0
shader_param/resolution = Vector2( 640, 480 )
shader_param/pixelate = false
shader_param/roll = false
shader_param/roll_speed = 8.0
shader_param/roll_size = 0.0
shader_param/roll_variation = 1.8
shader_param/distort_intensity = 0.0
shader_param/noise_opacity = 0.4
shader_param/noise_speed = 5.0
shader_param/static_noise_intensity = 0.0
shader_param/aberration = 0.006
shader_param/brightness = 1.4
shader_param/discolor = false
shader_param/warp_amount = 0.785
shader_param/clip_warp = true
shader_param/vignette_intensity = 0.4
shader_param/vignette_opacity = 0.565

[node name="KinematicBody2D" type="KinematicBody2D" groups=["Player", "player"]]
collision_layer = 4
collision_mask = 258
script = ExtResource( 2 )
acceleration = 20
export_deceleration = 22
export_max_speed = 100
jump_slowing_down = 0
jump_height = 40.0
jump_time_to_peak = 0.3
jump_time_to_descent = 0.25
lowfallMultiplier = 75
maxfallspeed = 500
slower_fall_mult = 50

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource( 1 )

[node name="Player" type="Sprite" parent="."]
material = ExtResource( 5 )
position = Vector2( 0, -3 )
texture = ExtResource( 8 )
flip_h = true
hframes = 7
vframes = 6

[node name="PlayerAShoot" type="Sprite" parent="."]
visible = false
material = ExtResource( 5 )
texture = ExtResource( 3 )
hframes = 6
vframes = 6
frame = 1

[node name="Coyote timer" type="Timer" parent="."]
wait_time = 0.1
one_shot = true

[node name="jumpBuffer" type="RayCast2D" parent="."]
position = Vector2( 0, 4 )
enabled = true
cast_to = Vector2( 0, 15 )
collision_mask = 257

[node name="SoundPlayer" type="AudioStreamPlayer" parent="."]
volume_db = -15.0

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
playback_speed = 0.9
anims/RESET = SubResource( 2 )
anims/down_sh = SubResource( 15 )
anims/fall = SubResource( 14 )
anims/idle = SubResource( 3 )
anims/idle_down_sh = SubResource( 17 )
anims/idle_left_sh = SubResource( 18 )
anims/idle_right_sh = SubResource( 19 )
anims/idle_up_sh = SubResource( 20 )
anims/jump = SubResource( 7 )
anims/left_sh = SubResource( 21 )
anims/on_wall = SubResource( 13 )
anims/right_sh = SubResource( 22 )
anims/up_sh = SubResource( 16 )
anims/walk = SubResource( 4 )

[node name="Scale manager" type="AnimationPlayer" parent="."]
anims/RESET = SubResource( 9 )
anims/fall = SubResource( 10 )
anims/jump = SubResource( 11 )
anims/land = SubResource( 12 )

[node name="DashTimer" type="Timer" parent="."]
wait_time = 0.2
one_shot = true

[node name="DashDisableMove" type="Timer" parent="."]
wait_time = 0.2
one_shot = true

[node name="Position2D" type="Position2D" parent="."]

[node name="Particles2D" type="Particles2D" parent="."]
modulate = Color( 1, 1, 1, 0.447059 )
material = ExtResource( 5 )
position = Vector2( 0, 4 )
emitting = false
amount = 10
lifetime = 0.7
randomness = 0.28
local_coords = false
process_material = SubResource( 37 )
texture = ExtResource( 6 )

[node name="Camera" type="Camera2D" parent="."]
position = Vector2( 0, -20 )
current = true

[node name="Screen_shake_time" type="Timer" parent="Camera"]
one_shot = true

[node name="fade" type="AnimationPlayer" parent="."]
root_node = NodePath("../Camera")
anims/RESET = SubResource( 43 )
anims/fade_in = SubResource( 45 )
anims/fade_out = SubResource( 44 )

[node name="fade_out" type="ColorRect" parent="."]
modulate = Color( 1, 1, 1, 0 )
self_modulate = Color( 0, 0, 0, 1 )
material = ExtResource( 5 )
margin_left = -172.0
margin_top = -129.0
margin_right = 174.0
margin_bottom = 74.0
mouse_filter = 2
color = Color( 0, 0, 0, 0 )
__meta__ = {
"_edit_lock_": true
}

[node name="platformer" type="RichTextLabel" parent="."]
modulate = Color( 1, 0.980392, 0.301961, 1 )
margin_left = -155.0
margin_top = -68.0
margin_right = -44.0
margin_bottom = -23.0
rect_scale = Vector2( 0.9, 0.9 )
custom_fonts/normal_font = SubResource( 46 )
text = "-100"

[node name="shooter" type="RichTextLabel" parent="."]
modulate = Color( 0.2, 0.235294, 0.513726, 1 )
margin_left = -155.0
margin_top = -68.0
margin_right = -44.0
margin_bottom = -23.0
rect_scale = Vector2( 0.9, 0.9 )
custom_fonts/normal_font = SubResource( 46 )
text = "-100"

[node name="puzzle" type="RichTextLabel" parent="."]
modulate = Color( 0.2, 0.235294, 0.513726, 1 )
margin_left = -155.0
margin_top = -68.0
margin_right = -44.0
margin_bottom = -23.0
rect_scale = Vector2( 0.9, 0.9 )
custom_fonts/normal_font = SubResource( 46 )
text = "-100"

[node name="Control" type="Control" parent="."]
margin_left = -164.0
margin_top = -104.0
margin_right = 158.0
margin_bottom = 75.9997
mouse_filter = 2
__meta__ = {
"_edit_group_": true,
"_edit_lock_": true
}

[node name="platformer" type="ProgressBar" parent="Control"]
margin_left = 33.0
margin_top = 8.0
margin_right = 92.0
margin_bottom = 20.0
mouse_filter = 2
custom_styles/fg = SubResource( 41 )
custom_styles/bg = SubResource( 42 )
max_value = 10.0
step = 1.0
value = 5.0
percent_visible = false

[node name="shooter" type="ProgressBar" parent="Control"]
margin_left = 33.0
margin_top = 8.0
margin_right = 92.0
margin_bottom = 20.0
mouse_filter = 2
theme = SubResource( 47 )
custom_styles/fg = SubResource( 48 )
custom_styles/bg = SubResource( 49 )
max_value = 10.0
step = 1.0
value = 5.0
percent_visible = false

[node name="puzzle" type="ProgressBar" parent="Control"]
margin_left = 33.0
margin_top = 8.0
margin_right = 92.0
margin_bottom = 20.0
mouse_filter = 2
theme = SubResource( 50 )
custom_styles/fg = SubResource( 51 )
custom_styles/bg = SubResource( 52 )
max_value = 10.0
step = 1.0
value = 5.0
percent_visible = false

[node name="TextureRect" type="TextureRect" parent="Control"]
material = ExtResource( 5 )
margin_left = 8.0
margin_top = -6.0
margin_right = 48.0
margin_bottom = 34.0
mouse_filter = 2
texture = ExtResource( 4 )
expand = true

[node name="CanvasLayer" type="CanvasLayer" parent="."]
layer = 2
offset = Vector2( 160, 110 )
transform = Transform2D( 1, 0, 0, 1, 160, 110 )

[node name="ColorRect" type="ColorRect" parent="CanvasLayer"]
material = SubResource( 54 )
margin_left = -191.0
margin_top = -135.0
margin_right = 186.0
margin_bottom = 90.0
rect_pivot_offset = Vector2( -172, 97 )

[connection signal="timeout" from="Camera/Screen_shake_time" to="." method="_on_Screen_shake_time_timeout"]
[connection signal="animation_finished" from="fade" to="." method="_on_fade_animation_finished"]
